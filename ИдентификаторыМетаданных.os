Перем ФайлКонфиг;
Перем Таблица;

Функция ТипыМетаданных()
	
	Массив = Новый Массив();
	
	Массив.Добавить("BusinessProcess");
	Массив.Добавить("Task");
	Массив.Добавить("Catalog");
	Массив.Добавить("ChartOfAccounts");
	Массив.Добавить("ChartOfCalculationTypes");
	Массив.Добавить("ChartOfCharacteristicTypes");
	Массив.Добавить("Constant");
	Массив.Добавить("Document");
	Массив.Добавить("ExchangePlan");
	Массив.Добавить("InformationRegister");

	Возврат Массив;

КонецФункции

Процедура Инициализация(Путь)
	
	ИмяКонфига = "ConfigDumpInfo.xml";
	
	Файл = Новый Файл(Путь);
	Если Файл.Существует() Тогда
		
		Если Файл.ЭтоФайл() И Файл.Имя = "ConfigDumpInfo.xml" Тогда
		
			ФайлКонфиг = Файл.ПолноеИмя;
			Возврат;

		ИначеЕсли Файл.ЭтоКаталог() Тогда
			
			Файл2 = Новый Файл(ОбъединитьПути(Путь, ИмяКонфига));
			Если Файл2.Существует() И Файл2.ЭтоФайл() И Файл2.Имя = "ConfigDumpInfo.xml" Тогда
				ФайлКонфиг = Файл2.ПолноеИмя;
				Возврат;
			КонецЕсли;

		КонецЕсли;
	
	КонецЕсли;

	ВызватьИсключение "Файл ConfigDumpInfo.xml не найден";

КонецПроцедуры

Функция ПрочитатьТекстовыйФайл(ИмяФайла)

	Чтение = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	Текст = Чтение.Прочитать();
	Чтение.Закрыть();
	
	Возврат Текст;

КонецФункции

Процедура ЗаписатьТекстовыйФайл(ИмяФайла, Текст)

	Запись = Новый ЗаписьТекста(
		ИмяФайла, 
		КодировкаТекста.UTF8NoBOM, 
		Символы.ПС, 
		Ложь,
		Символы.ПС);

	Запись.Записать(Текст);
	Запись.Закрыть();

КонецПроцедуры

Процедура ПолучитьИменаИдентификаторов()

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Тип");
	Таблица.Колонки.Добавить("Имя");
	Таблица.Колонки.Добавить("УИД");
	
	мНужныеТипы = ТипыМетаданных();

	Текст = ПрочитатьТекстовыйФайл(ФайлКонфиг);
	
	РВ = Новый РегулярноеВыражение("name=""(" + СтрСоединить(мНужныеТипы, "|") + ")\.([^.]+?)"" id=""(.+?)""");
	Совпадения = РВ.НайтиСовпадения(Текст);
	Для каждого Совпадение Из Совпадения Цикл
		
		Стр = Таблица.Добавить();
		
		Стр.Тип = Совпадение.Группы[1].Значение;
		Стр.Имя = Совпадение.Группы[2].Значение;
		Стр.УИД = Совпадение.Группы[3].Значение;

	КонецЦикла;

КонецПроцедуры

Процедура СформироватьСкрипт()

	мМассивМассивов = Новый Массив;

	Шаблон = "			(%1, %2, %3)";

	мТекст = Новый Массив;
	Для инд = 0 По Таблица.Количество()-1 Цикл
		Стр = Таблица[инд];
		мТекст.Добавить(СтрШаблон(Шаблон, 
			ПреобразоватьУИДBinary(Стр.УИД), 
			"'" + Стр.Тип + "'", 
			"'" + Стр.Имя + "'"));

		Если (инд+1) % 1000 = 0 Тогда
			мМассивМассивов.Добавить(мТекст);
			мТекст = Новый Массив;
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(мТекст) Тогда
		мМассивМассивов.Добавить(мТекст);
	КонецЕсли;

	Скрипт = Новый Массив;
	Скрипт.Добавить("
	|USE [<BaseName, varchar(80),>]
	|GO
	|
	|TRUNCATE TABLE [dbo].[_DataHistoryMetadataName]
	|
	|");

	ШаблонВставки = "
	|INSERT INTO [dbo].[_DataHistoryMetadataName]
	|			([_MetadataId]
	|			,[Type]
	|			,[Name])
	|		VALUES
	|%1
	|GO
	|
	|";

	Для каждого мТекст Из мМассивМассивов Цикл
		Скрипт.Добавить(СтрШаблон(ШаблонВставки, СтрСоединить(мТекст, "," + Символы.ПС)));
	КонецЦикла;

	ЗаписатьТекстовыйФайл("СкриптВставкиМетаданных.sql", СтрСоединить(Скрипт));

КонецПроцедуры

Функция ПреобразоватьУИДBinary(УИД)
	
	м = СтрРазделить(УИД, "-");
	Binary = "0x" + м[3] + м[4] + м[2] + м[1] + м[0];

	Возврат Binary;

КонецФункции


Инициализация(АргументыКоманднойСтроки[0]);

ПолучитьИменаИдентификаторов();

СформироватьСкрипт();